@model IEnumerable<letterstocrushes.Core.Model.Letter>
@using letterstocrushes;

@{
    ViewBag.Title = "letters to crushes";
}


@foreach (var item in Model) {

    Html.RenderPartial("_LetterHomeListItem", item);
   
}

@Html.Raw(Helpers.Pager(ViewBag.CurrentPage, ViewBag.Pages, Url.Content("~")))

<div id="disqus_thread" class="letterComments" style="display: none"></div>

@if (ViewBag.CurrentPage > 15)
{
    <text>

        <script type="text/javascript" src="http://disqus.com/forums/crushes/embed.js"></script>
        <script type="text/javascript">

            //<![CDATA[
            (function () {

                var links = document.getElementsByTagName('a');
                var query = '?';

                for (var i = 0; i < links.length; i++) {
                    if (links[i].href.indexOf('#disqus_thread') >= 0) {
                        query += 'url' + i + '=' + encodeURIComponent(links[i].href) + '&';
                    }
                }
                document.write('<script charset="utf-8" type="text/javascript" src="http://disqus.com/forums/crushes/get_num_replies.js' + query + '"></' + 'script>');

            })();
            //]]>

        </script>


    </text>
}

@Html.Partial("_LetterVoteListener")

<script type="text/javascript" >


    $(document).ready(function() {

        var offset = new Date().getTimezoneOffset();
        $.cookie('userTimeZone', offset/60, { expires: 365 });

	    jQuery(document).bind('keydown', 'left',function (evt){previous_page(); return false; });
	    jQuery(document).bind('keydown', 'right',function (rgt){next_page(); return false; });

        var resp;
	    var current_page = @ViewBag.CurrentPage;

	    function previous_page() {
		    var previous_page = current_page - 1;
		    if (previous_page > 0) {
			    window.location = "/page/" + previous_page;
		    }
	    }

	    function next_page() {
		    var next_page = current_page + 1;
		    window.location = "/page/" + next_page;
	    }

        var visitor_update;

        // first we want to get the user's name
        // before we make the chat client

        // Proxy created on the fly          
        visitor_update = $.connection.visitorUpdate;

        // Declare a function on the chat hub so the server can invoke it          
        visitor_update.client.addMessage = function (message) {
            var current_hearts = parseInt($("#b" + message).html());
            $("#b" + message).html(current_hearts + 1);            
        };

        // Start the connection
        $.connection.hub.start().done(function () {
            visitor_update.server.join(@Html.Raw(Model.First().Id), @Html.Raw(Model.Last().Id), "home");
        });

    });


</script>

@section Footer {
    @Html.Partial("_Footer")
}