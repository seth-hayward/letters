@model IEnumerable<letterstocrushes.Core.Model.Letter>
@using letterstocrushes;

@{
    Layout = "~/Views/Shared/_LayoutMobile.cshtml";
    ViewBag.Title = "more";

    string host = "";

    switch (Request.Url.Port)
    {
        case 80:
            host = "http://" + Request.Url.Host + VirtualPathUtility.ToAbsolute("~/mobile/more/page/");
            break;
        default:
            host = "http://" + Request.Url.Host + ":" + Request.Url.Port + VirtualPathUtility.ToAbsolute("~/mobile/more/page/");
            break;
    }

    ViewBag.PageLocation = host;    
}


@foreach (var item in Model) {

    Html.RenderPartial("_LetterMoreListItem", item);
   
}

@Html.Raw(Helpers.Pager(ViewBag.CurrentPage, ViewBag.Pages, Url.Content("~/mobile/more")))

@Html.Partial("_LetterVoteListener")

<script type="text/javascript" >

    $(document).ready(function() {

        var offset = new Date().getTimezoneOffset();
        $.cookie('userTimeZone', offset/60, { expires: 365 });

        var resp;
	    var current_page = @ViewBag.CurrentPage;

	    function previous_page() {
		    var previous_page = current_page - 1;
		    if (previous_page > 0) {
		        $.mobile.changePage("@Html.Raw(ViewBag.PageLocation)" + previous_page, { transition: "slide" });
		    }
	    }

	    function next_page() {
		    var next_page = current_page + 1;
		    $.mobile.changePage("@Html.Raw(ViewBag.PageLocation)" + next_page, { transition: "slide" });
	    }

        // Bind the swipeleftHandler callback function to the swipe event on div.box
	    $('div.container').on( 'swipeleft', swipeleftHandler );
	    $('div.container').on( 'swiperight', swiperightHandler );
 
        // Callback function references the event target and adds the 'swipeleft' class to it
	    function swipeleftHandler(event){
	        next_page();
	    }

	    function swiperightHandler(event){
	        previous_page();
	    }

        var visitor_update;

        // first we want to get the user's name
        // before we make the chat client

        // Proxy created on the fly          
        visitor_update = $.connection.visitorUpdate;

        // Declare a function on the chat hub so the server can invoke it          
        visitor_update.client.addMessage = function (message) {
            var current_hearts = parseInt($("#b" + message).html());
            $("#b" + message).html(current_hearts + 1);            
        };

        // Start the connection
        $.connection.hub.start().done(function () {
            visitor_update.server.join(@Html.Raw(Model.First().Id), @Html.Raw(Model.Last().Id), "home");
        });

    });

</script>